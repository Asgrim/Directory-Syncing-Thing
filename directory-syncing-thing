#!/bin/bash
### BEGIN INIT INFO
# Provides:          directory-syncing-thing
# Required-Start:    $remote_fs $all
# Required-Stop:     $remote_fs
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Start/stop directory syncing thing
### END INIT INFO

#
# Copyright (C) 2011 James Titcumb 
#
# See LICENSE file for license!     
#

INSTALLDIR=/opt/directory-syncing-thing

DSTCONFIG=/etc/directory-syncing-thing.conf
if [ ! -f $DSTCONFIG ]
then
  echo "Config file in $DSTCONFIG not found..."
  exit 78
fi

cd $INSTALLDIR

source $DSTCONFIG

# Don't need to change anything below here hopefully
LOGSDIR=$INSTALLDIR/logs
LOCKFILE=$INSTALLDIR/sync.lock
PIDSDIR=$INSTALLDIR/pids
MASTERLOG=$INSTALLDIR/logs/master.log

PATH=/sbin:/usr/sbin:/bin:/usr/bin
DESC="Directory Syncing Thing"
NAME=directory-syncing-thing
SCRIPTNAME=/etc/init.d/$NAME
KERNEL="$(uname -s)"
RELEASE="$(uname -r)"
. /lib/init/vars.sh
. /lib/lsb/init-functions

do_start() {
  # Check we are allowed to start - specify in config!
  if [ "$ENABLE_DST" != "Yes" ]
  then
    echo "Directory syncing thing not enabled. Set ENABLE_DST=Yes in config." >> $MASTERLOG
    exit 3
  fi

  if [ $UID != 0 ]
  then
    echo "This script must be run as root."
    exit 1
  fi

  # Check if lockfile exists
  if [ -f $LOCKFILE ];
  then
    return 3
  fi

  # Create lockfile
  touch $LOCKFILE

  # Loop through specified watches
  for WATCHID in ${!WATCHDIRS_N[*]}
  do
    iNAME=${WATCHDIRS_N[$WATCHID]}
    iLOCAL=${WATCHDIRS_L[$WATCHID]}
    iREMOTE=${WATCHDIRS_R[$WATCHID]}

    LOGFILE=$LOGSDIR/$iNAME.log
    :>$LOGFILE

    ($INSTALLDIR/watch_folder.sh $iLOCAL $iREMOTE $iNAME >> $LOGFILE 2>&1) &
    MY_PPID=$!

    echo "Started watching $iNAME." >> $MASTERLOG

    echo $MY_PPID > $PIDSDIR/$WATCHID.pid
  done

  return 0
}

do_stop() {
   if [ $UID != 0 ]
   then
     echo "This script must be run as root."
     exit 1
   fi

   for WATCHID in ${!WATCHDIRS_N[*]}
   do
     echo -ne "Stopping ${WATCHDIRS_N[$WATCHID]}... " >> $MASTERLOG
     PIDFILE=$PIDSDIR/$WATCHID.pid
     if [ -f $PIDFILE ]
     then
       MY_PPID=`cat $PIDFILE`
 
       for i in `ps -ef | awk '$3 == '${MY_PPID}' { print $2 }'`
       do
         kill -9 $i > /dev/null 2>&1
       done
  
       kill -9 $MY_PPID > /dev/null 2>&1
       rm -f $PIDFILE
       echo "done." >> $MASTERLOG
     else
       echo "not running." >> $MASTERLOG
     fi
   done

   if [ -f $LOCKFILE ]
   then
     rm $LOCKFILE
   else
     echo "Doesn't look like I was running..." >> $MASTERLOG
     return 3
   fi

   return 0
}

do_status() {

  if [ -f $LOCKFILE ]
  then
    echo "Running."
    for WATCHID in ${!WATCHDIRS_N[*]}
    do
      PIDFILE=$PIDSDIR/$WATCHID.pid
      if [ -f $PIDFILE ]
      then
        MY_PPID=`cat $PIDFILE`

        echo -ne "${WATCHDIRS_N[$WATCHID]} pids: "
 
        PIDCOUNT=0
        for i in `ps -ef | awk '$3 == '${MY_PPID}' { print $2 }'`
        do
          echo -ne " $i "
          PIDCOUNT=`expr $PIDCOUNT + 1`
        done

        if [ $PIDCOUNT -eq 0 ]
        then
          echo " no pids - not running "
        elif [ $PIDCOUNT -eq 1 ]
        then
          echo " (probably unison syncing) "
        elif [ $PIDCOUNT -eq 2 ]
        then
          echo " (probably running ok) "
        else
          echo " ($PIDCOUNT processes, huh?) "
        fi
      fi
    done
  else
    echo "Not running."
  fi
}

case "$1" in
  start)
    echo -n "Starting $DESC $NAME"
    do_start
    case "$?" in
      0) log_success_msg ;;
      *) log_failure_msg ;;
    esac
    ;;
  stop)
    echo -n "Stopping $DESC $NAME"
    do_stop
    case "$?" in
      0) log_success_msg ;;
      *) log_failure_msg ;;
    esac
    ;;
  restart|reload|force-reload)
    echo -n "Restarting $DESC $NAME"
    do_stop
    case "$?" in
      0)
        sleep 1
        do_start
        case "$?" in
          0) log_success_msg ;;
          *) log_failure_msg ;;
        esac
      ;;
      *) log_failure_message ;;
    esac
    ;;
  status)
    do_status
    ;;
  *)
    log_warning_msg "Usage: $SCRIPTNAME [start|stop|restart|force-reload|status]" >&2
    exit 3
    ;;
esac

:
